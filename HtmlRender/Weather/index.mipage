:Class WeatherGraph : #.MiPage

    :Field Public ZipCode←10001

    ∇ Compose;chartDiv;gridDiv;msgSpan;Msg;WeatherData;dc;mapDiv
      :Access public
      Add _.StyleSheet'style.css'
      Add _.title'NOAA Weather Forecast'
      Add _.h2'NOAA Weather Forecast'
      Add MapScripts ⍝ insert scripts to enable loading Google maps
     
      (Add _.Input'text'ZipCode'Zip Code: ').On'change' 'Redraw'
     
      msgSpan←'msgspan'Add _.span
     
      'displaycontrol'Add _.span'Display as: '
      'dispgraph' 'name="dc"' 'checked='Add _.Input'radio' '' 'Graph' 'right'
      'dispgrid' 'name="dc"'Add _.Input'radio' '' 'Grid' 'right'
     
      (mapDiv chartDiv gridDiv)←'mapdiv' 'chartdiv' 'griddiv'Add¨_.div
     
      (Msg WeatherData)←GetNoaaData ZipCode
      msgSpan.Add(0∊⍴WeatherData)MakeInfo Msg
      mapDiv.Add GetMap Msg
      chartDiv.Add ZipCode MakeChart WeatherData
      gridDiv.Add MakeGrid WeatherData
     
    ∇

    ∇ r←Redraw;data;Msg;WeatherData
      :Access Public
      (Msg WeatherData)←GetNoaaData ZipCode←_value
      r←'#msgspan'Replace(0∊⍴WeatherData)MakeInfo Msg
      r,←'#chartdiv'Replace ZipCode MakeChart WeatherData
      r,←'#griddiv'Replace MakeGrid WeatherData
      r,←'#mapdiv'Replace GetMap Msg
    ∇

    ∇ r←error MakeInfo Msg
      r←(error/'.error')New _.b Msg
    ∇

    ∇ grid←MakeGrid WeatherData;items;levels
      grid←''
      →0⍴⍨0∊⍴WeatherData
      items←'Time' 'Temperature (∘F)' 'Dew point (∘F)' 'Humidity (%)'⍪((⊂'')@(¯99999∘≡¨)WeatherData)
      levels←0,1+~1,2≢/10↑¨WeatherData[;1] ⍝ assign levels based on date
      grid←'grid'New _.ejTreeGrid items levels
      grid.width←1000
    ∇

    ∇ chart←zip MakeChart WeatherData;names;data;i;series
      chart←''
      →0⍴⍨0∊⍴WeatherData  ⍝ exit if no data
      names←'Temperature (∘F)' 'Dew point (∘F)' 'Humidity (%)'
      chart←'chart'New _.ejChart
      :For i :In ⍳3
          series←'series[',(⍕i),']'
          (series,'.points')chart.Set'xy'#.JSON.fromTable{⍵↑⍨+/∧\⍵[;2]≠¯99999}WeatherData[;1,1+i]
          (series,'.type')chart.Set'line'
          (series,'.name')chart.Set i⊃names
      :EndFor
      'size.(height width)'chart.Set'700' '1000'
      'title.text'chart.Set'NOAA 7-Day Forecast for Zip Code ',⍕zip
      'primaryXAxis.labelRotation'chart.Set ¯45
      'primaryYAxis.range.(interval min max)'chart.Set 5 0(100⌈10×⌈0.1×⌈/,WeatherData[;2 3 4])
      'commonSeriesOptions.enableAnimations'chart.Set _true
      'commonSeriesOptions.marker.(shape visible)'chart.Set'circle'_true
      'commonSeriesOptions.marker.size.(height width)'chart.Set 5 5
      'commonSeriesOptions.tooltip.(visible format)'chart.Set _true'#point.x# <br/> #series.name# : #point.y#'
    ∇

    ∇ r←GetMap msg;latlong
      ⍝ embed a Google map for our zipcode
      r←''
      →0⍴⍨2≠≢latlong←#.Strings.tonum msg
      r←New _.script'loadMap(',(1↓∊',',¨#.Strings.fmtNum¨latlong),')'
    ∇

    ∇ r←MapScripts
      r←(⊂'src' 'https://maps.googleapis.com/maps/api/js?key=AIzaSyAgm3qwSRLxdc9GTO9xCyzCySu3_d7lRws')New _.script
      r,←New _.script ScriptFollows
    ⍝ var map;
    ⍝ function loadMap(lat,long){
    ⍝    map = new google.maps.Map(document.getElementById('mapdiv'),{
    ⍝       center: {lat: lat, lng: long},
    ⍝       zoom: 8 });
    ⍝    }
    ∇

    ∇ r←GetNoaaData zip;url;params;req;data;times;temps;dew;hum;ind;length
      ⍝ Retrieve weather data for a zip code from the National Oceanographic and Atmospheric Administration
      ⍝ Returns [1] error msg or '' [2] weather information
      :Access public shared
      r←(' Unable to retrieve weather data for Zip Code ',∊⍕zip)(0 4⍴0)
      url←'https://graphical.weather.gov/xml/sample_products/browser_interface/ndfdXMLclient.php'
      params←'zipCodeList=',(⍕zip),'&product=time-series&temp=temp&rh=rh&dew=dew'
      req←#.HttpCommand.Get url,'?',params
      :If 0=req.rc
          :Trap 0
              data←⎕XML req.Data
          :Else
              →0
          :EndTrap
          :If 'error'≡5↑(⊂1 2)⊃data
              r[1]←⊂' ',⊃(data[;3],⊂'Could not locate error message in XML data')[data[;2]⍳⊂'error']
              →0
          :EndIf
      ⍝ the NOAA timeseries uses 3-hour windows for the first few days, then 6-hour windows
      ⍝ we interpolate intermediate values to give consistent x-axis spacing
          times←#.Dates.DateToIDN¨parseDate¨1↓3⌷[2]data(<kids)'time-layout'
          temps←∊#.Strings.tonum¨3⌷[2]data(≤kids)'name' 'Temperature'
          dew←∊#.Strings.tonum¨3⌷[2]data(≤kids)'name' 'Dew Point Temperature'
          hum←∊#.Strings.tonum¨3⌷[2]data(≤kids)'name' 'Relative Humidity'
      ⍝ NOAA data may have different time layouts, so, we'll just pad out the data
          length←≢times
          (times temps dew hum){((⍵⌊≢⍺)↑⍺),(0⌈⍵-≢⍺)⍴¯99999}←length
          ind←1+1⍳⍨2≠/2-/times
          :If ind<≢times
              times←ind adjust times
              (temps dew hum)←{⌈ind adjust ⍵}¨temps dew hum
          :EndIf
          times←¯3↓¨#.Dates.TSFmt∘#.Dates.IDNToDate¨times
          r[1]←⊂' Located at ',∊('Lat: ' ' Long: '),¨2⌷[2](⊂⌽4,data[;2]⍳⊂'point')⊃data ⍝ lat/long
          r[2]←⊂times,temps,dew,⍪hum
      :EndIf
    ∇

    interpolate←{⍵{(⍺,⍵)[⍋∊⍳∘≢¨⍺ ⍵]}(+/÷≢)¨2,/⍵}
    adjust←{(⍺↑⍵),interpolate ⍺↓⍵}
    parseDate←{¯2↓⊃(//) ⎕VFI ⍵{⍵\⍵/⍺}⍵∊⎕D}
    kids←{(⍺⍺{1↓⍵⌿⍨∧\1,1↓⍵[1;1]⍺⍺ ⍵[;1]})⍺↓⍨¯1+⍺{⍺[;1+⍳≢⍵]⍳⍉⍪⍵}⊆⍵}

:EndClass
